{"version":3,"sources":["components/Buttons/Buttons.tsx","components/Buttons/Button/AdditionalButton.tsx","components/Buttons/Button/Button.tsx","components/Buttons/Button/OperatorButton.tsx","components/calcBody/CalcBody.tsx","components/display/Display.tsx","screens/Calculator/Calculator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Buttons","value","memory","operator","setValue","setOperator","setMemory","handlingAdd","handlingSub","handlingMul","handlingDiv","handlingEquals","result","eval","parseFloat","String","handlingReset","handlingInput","e","target","indexOf","onHandleReset","onHandleInput","onHandleDiv","onHandleMul","onHandleSub","onHandleAdd","onHandleEquals","AdditionalButton","props","className","onClick","Button","number","OperatorButton","CalcBody","DisplayCalc","type","id","onChange","Number","ref","input","focus","Calculator","React","useState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c003aa7f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {CalcBody} from \"../calcBody/CalcBody\";\r\n\r\nexport type ButtonsType = {\r\n    value: number\r\n    memory: number\r\n    operator: string\r\n    setValue?: (value: number) => void\r\n    setOperator?: (operator: string) => void\r\n    setMemory?: (memory: number) => void\r\n};\r\n\r\n\r\nexport const Buttons = ({value, memory, operator, setValue, setOperator, setMemory}: ButtonsType) => {\r\n     const handlingAdd = () => {\r\n         if (setMemory && setOperator && setValue) {\r\n             setMemory(value);\r\n             setOperator(\"+\");\r\n             setValue(0);\r\n         }\r\n    };\r\n    const handlingSub = () => {\r\n        if (setMemory && setOperator && setValue) {\r\n            setMemory(value);\r\n            setOperator(\"-\");\r\n            setValue(0);\r\n        }\r\n    };\r\n    const handlingMul = () => {\r\n        if (setMemory && setOperator && setValue) {\r\n            setMemory(value);\r\n            setOperator(\"*\");\r\n            setValue(0);\r\n        }\r\n    };\r\n    const handlingDiv = () => {\r\n        if (setMemory && setOperator && setValue) {\r\n            setMemory(value);\r\n            setOperator(\"/\");\r\n            setValue(0);\r\n        }\r\n    };\r\n    const handlingEquals = () => {\r\n        if (memory && operator && value) {\r\n            const result = eval(\r\n                parseFloat(String(memory)) + operator + parseFloat(String(value))\r\n            );\r\n            if (setValue) {\r\n                setValue(result);\r\n            }\r\n        }\r\n    };\r\n    const handlingReset = () => {\r\n        if (setMemory && setOperator && setValue) {\r\n            setValue(0);\r\n            setMemory(0);\r\n            setOperator(\"\");\r\n        }\r\n    };\r\n    const handlingInput = (e: any) => {\r\n        if (e.target.value === \"%\") {\r\n            const percent = value / 100;\r\n            if (setValue) {\r\n                setValue(parseFloat(String(percent)));\r\n            }\r\n            return;\r\n        }\r\n        if (e.target.value === \"+/-\") {\r\n            const negativeNum = value * -1;\r\n            if (setValue) {\r\n                setValue(negativeNum);\r\n            }\r\n            return;\r\n        }\r\n        value += e.target.value;\r\n        let values = String(value);\r\n        if (values.indexOf(\".\") > 0) {\r\n            if (setValue) {\r\n                setValue(value);\r\n            }\r\n            return;\r\n        }\r\n        if (setValue) {\r\n            setValue(parseFloat(String(value)));\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <CalcBody onHandleReset={handlingReset}\r\n                      onHandleInput={handlingInput}\r\n                      onHandleDiv={handlingDiv}\r\n                      onHandleMul={handlingMul}\r\n                      onHandleSub={handlingSub}\r\n                      onHandleAdd={handlingAdd}\r\n                      onHandleEquals={handlingEquals}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport function AdditionalButton(props: { onClick: (e: any) => void, operator: string }) {\r\n    return <button className=\"first-row-column\" value={String(props.operator)} onClick={props.onClick}>\r\n        {props.operator}\r\n    </button>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Button(props: { onClick: (e: any) => void, number: number }) {\r\n    return <button value={String(props.number)} onClick={props.onClick}>\r\n        {props.number}\r\n    </button>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport function OperatorButton(props: { onClick: () => void, operator: string }) {\r\n    return <button className=\"operator\" onClick={props.onClick}>\r\n        {props.operator}\r\n    </button>;\r\n}\r\n","import React from \"react\";\r\nimport { AdditionalButton } from \"../Buttons/Button/AdditionalButton\";\r\nimport { Button } from \"../Buttons/Button/Button\";\r\nimport { OperatorButton } from \"../Buttons/Button/OperatorButton\";\r\n\r\n\r\ntype CalcBodyTypes = {\r\n    onHandleReset: () => void,\r\n    onHandleInput: (e: any) => void,\r\n    onHandleDiv: () => void,\r\n    onHandleMul: () => void,\r\n    onHandleSub: () => void,\r\n    onHandleAdd: () => void,\r\n    onHandleEquals: () => void\r\n};\r\n\r\nexport function CalcBody(props: CalcBodyTypes) {\r\n    return <div className=\"cal-body\">\r\n        <AdditionalButton operator={\"AC\"} onClick={props.onHandleReset}/>\r\n        <AdditionalButton operator={\"%\"} onClick={props.onHandleInput}/>\r\n        <AdditionalButton operator={\"+/-\"} onClick={props.onHandleInput}/>\r\n        <OperatorButton operator={\"/\"} onClick={props.onHandleDiv}/>\r\n        <Button number={7} onClick={props.onHandleInput}/>\r\n        <Button number={8} onClick={props.onHandleInput}/>\r\n        <Button number={9} onClick={props.onHandleInput}/>\r\n        <OperatorButton operator={\"x\"} onClick={props.onHandleMul}/>\r\n        <Button number={4} onClick={props.onHandleInput}/>\r\n        <Button number={5} onClick={props.onHandleInput}/>\r\n        <Button number={6} onClick={props.onHandleInput}/>\r\n        <OperatorButton operator={\"-\"} onClick={props.onHandleSub}/>\r\n        <Button number={1} onClick={props.onHandleInput}/>\r\n        <Button number={2} onClick={props.onHandleInput}/>\r\n        <Button number={3} onClick={props.onHandleInput}/>\r\n        <OperatorButton operator={\"+\"} onClick={props.onHandleAdd}/>\r\n        <div className=\"last-row\">\r\n            <button value=\"0\" onClick={props.onHandleInput}>\r\n                0\r\n            </button>\r\n            <button value=\".\" onClick={props.onHandleInput}>\r\n                .\r\n            </button>\r\n            <button className=\"operator\" onClick={props.onHandleEquals}>\r\n                =\r\n            </button>\r\n        </div>\r\n    </div>;\r\n}\r\n","import React from \"react\";\r\n\r\ntype DisplayParams = {\r\n    value: number;\r\n    setValue: (value: number) => void\r\n};\r\n\r\nexport function DisplayCalc(props: DisplayParams) {\r\n    const { value, setValue } = props;\r\n\r\n    return (\r\n        <div className=\"input-area\">\r\n            <input\r\n                type=\"text\"\r\n                id=\"inputArea\"\r\n                value={value}\r\n                onChange={(e) => {\r\n                    setValue(Number(e.target.value));\r\n                }}\r\n                ref={(input) => input && input.focus()}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { DisplayCalc } from \"../../components/display/Display\";\r\nimport {Buttons} from \"../../components/Buttons/Buttons\";\r\n\r\n\r\n\r\nexport function Calculator() {\r\n    const [value, setValue] = React.useState(0);\r\n    const [memory, setMemory] = React.useState(0);\r\n    const [operator, setOperator] = React.useState(\"\");\r\n    return (\r\n        <div>\r\n            <DisplayCalc value={value} setValue={setValue}/>\r\n            <Buttons\r\n                setMemory={setMemory}\r\n                setOperator={setOperator}\r\n                setValue={setValue}\r\n                value={value}\r\n                memory={memory}\r\n                operator={operator}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Calculator } from './screens/Calculator/Calculator';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}